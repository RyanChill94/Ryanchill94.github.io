<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DAY DREAM</title>
  
  <subtitle>go big or go home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-21T15:30:02.328Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ryanchill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/21/hello-world/"/>
    <id>http://yoursite.com/2018/10/21/hello-world/</id>
    <published>2018-10-21T15:30:02.328Z</published>
    <updated>2018-10-21T15:30:02.328Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[译]5个在ES6中被修复的Javascript缺陷</title>
    <link href="http://yoursite.com/2018/09/30/five-bad-parts-fix-in-es6/"/>
    <id>http://yoursite.com/2018/09/30/five-bad-parts-fix-in-es6/</id>
    <published>2018-09-30T09:06:51.000Z</published>
    <updated>2018-10-21T17:00:50.941Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6 的特性可以被分为以下几种类型</p><ul><li><ol><li>纯语法糖，比如 <code>class</code> 语法</li></ol></li><li><ol start="2"><li>JavaScript 增强性  功能，比如 <code>import</code></li></ol></li><li><ol start="3"><li>修复了 JS 中一些缺陷，比如 <code>let</code> 关键字</li></ol></li></ul><p>本文着重分析第三种类型，接下来，让我们来了解下 JavaScript 中哪些「Bad Parts」被 ES6 修复了。</p><blockquote><p> 我希望当你阅读完本文，你可以意识到使用一些简单 ES6 特性给你带来的巨大便利。</p></blockquote><h3 id="1-Block-Scope"><a href="#1-Block-Scope" class="headerlink" title="1. Block Scope"></a>1. Block Scope</h3><p>ES5 只有函数作用域(比如你定义在函数块里面的代码来形成作用域),因此带来了很多问题, ES6  提供了「块级别」的作用域（通过大括号包裹），同时使用 <code>let</code>  和 <code>const</code> 来代替 <code>var</code>。</p><h4 id="防止变量提升到外部作用域"><a href="#防止变量提升到外部作用域" class="headerlink" title="防止变量提升到外部作用域"></a>防止变量提升到外部作用域</h4><p>下面的例子可以看出来 变量 <code>bouns</code>没有被提升到 <code>if</code> 块级作用域之外 ， 变得其他像大多数编程语言那样可预测。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> base = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSalary</span>(<span class="params">addBonus</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (addBonus) &#123;</span><br><span class="line">    <span class="keyword">var</span> bonus = <span class="number">100</span>; <span class="comment">// 会被提升至if作用域之外</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base + bonus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> base + bonus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getSalary(<span class="literal">false</span>)); <span class="comment">// NaN 因为变量 bonus 被提升了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getSalary(<span class="literal">true</span>)); <span class="comment">// 1100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> base = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSalary</span>(<span class="params">addBonus</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (addBonus) &#123;</span><br><span class="line">    <span class="keyword">let</span> bonus = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base + bonus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> base + bonus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getSalary(<span class="literal">false</span>)); <span class="comment">// 1000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getSalary(<span class="literal">true</span>)); <span class="comment">// 1100</span></span><br></pre></td></tr></table></figure><h4 id="防止重复定义变量"><a href="#防止重复定义变量" class="headerlink" title="防止重复定义变量"></a>防止重复定义变量</h4><p>ES6 不允许使用<code>let</code>或者<code>const</code>定义的变量在同一个作用域中重复定义，这有效的避免了不同库之间的函数表达式的重复（注：这里翻译有点问题，原文为:This is very helpful in avoiding duplicate function expressions coming from different libraries ）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span>  add  = <span class="function">(<span class="params">a, b</span>) =&gt;</span>  a  +  b;</span><br><span class="line"><span class="keyword">const</span>  add  = <span class="function">(<span class="params">a, b</span>) =&gt;</span>  a  +  b; <span class="comment">// 会抛出重复定义错误</span></span><br></pre></td></tr></table></figure><h4 id="取代-IIFE-的功能"><a href="#取代-IIFE-的功能" class="headerlink" title=" 取代 IIFE 的功能"></a> 取代 IIFE 的功能</h4><p>在 ES5，就像下面的例子， 我们不得不使用立即执行函数(IIFE)来确保全局作用域不会被污染，在 ES6 中，我们只需要简单的把代码包裹在<code>{}</code>中,使用 <code>let</code> 和 <code>const</code>  来定义变量就可以获得相同的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.betterJQ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Version <span class="subst">$&#123;<span class="built_in">window</span>.bettterJQ.version&#125;</span> already exists`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">"v0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Better JQuery"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> betterJQ = &#123;</span><br><span class="line">      name,</span><br><span class="line"></span><br><span class="line">      version,</span><br><span class="line"></span><br><span class="line">      ajax: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="string">"requst!"</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.betterJQ = betterJQ; <span class="comment">// 挂载到全局对象上</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.betterJQ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Version <span class="subst">$&#123;<span class="built_in">window</span>.bettterJQ.version&#125;</span> already exists`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="string">"v0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">"Better JQuery"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> betterJQ = &#123;</span><br><span class="line">      name,</span><br><span class="line"></span><br><span class="line">      version,</span><br><span class="line"></span><br><span class="line">      ajax: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="string">"requst!"</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.betterJQ = betterJQ; <span class="comment">// 挂载到全局对象上</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(version); <span class="comment">// Reference Error</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Reference Error</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(betterJQ.version); <span class="comment">// v0.0.1</span></span><br></pre></td></tr></table></figure><p>babel 干了什么？</p><p>babel 会将我们的代码编译成如下形式:</p><p><img src="/img/postImg/babel-transfer.png" alt="bebel 转换"></p><h4 id="让在循环中使用函数变得轻而易举"><a href="#让在循环中使用函数变得轻而易举" class="headerlink" title="让在循环中使用函数变得轻而易举"></a>让在循环中使用函数变得轻而易举</h4><p>在 ES5, 如果你有一个函数  在循环中，形  如<code>for(var i = 0; i &lt; 3; i++) {…}</code>,如果你的函数需要使用变量，由于变量提升的缘故，可能会和  预期不一样，如果使用<code>let</code>, 你将不会遇到任何麻烦。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// 同一个refer</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[j]()); <span class="comment">// 3, 3, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// refer 到当前块级作用域的i</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[j]()); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note: 不能使用<code>const</code>，因为它是常量。除非你使用新<code>for...of</code>循环</p></blockquote><h3 id="2-词法this（通过箭头函数）"><a href="#2-词法this（通过箭头函数）" class="headerlink" title="2. 词法this（通过箭头函数）"></a>2. 词法<code>this</code>（通过箭头函数）</h3><p>在 ES5 中,<code>this</code> 可以取决于你在哪里调用、 你怎么调用，因而导致了 JS 开发者无数的烦恼，ES6 通过词法<code>this</code> 消除了这个主要问题。</p><p>词法<code>this</code>是一个这样的特性：  即强制要求变量<code>this</code>天然指向当前定义的对象上。</p><p>两个在 ES5 中的问题，以及解决方案:</p><p>在下面的例子中，我们想要答打印 user 的 firstName 和 Salary， 但是当我们模拟从服务端获取  薪  金  数据，会发现当响应返回的时候，<code>this</code>指向的  是 window，而不是 person 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSalaryFromServer</span>(<span class="params">id, cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cb(<span class="number">1000</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  id: <span class="string">"1"</span>,</span><br><span class="line"></span><br><span class="line">  firstName: <span class="string">"chill"</span>,</span><br><span class="line"></span><br><span class="line">  lastName: <span class="string">"ryan"</span>,</span><br><span class="line"></span><br><span class="line">  printNameAndSalary: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line"></span><br><span class="line">    getSalaryFromServer(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.firstName); <span class="comment">// underfined</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(salary); <span class="comment">// 1000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix 1</span></span><br><span class="line"></span><br><span class="line">    getSalaryFromServer(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;).bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    getSalaryFromServer(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(self.firstName); <span class="comment">// chill</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ES6 的解决方案:</p><p>简单的在代码中使用箭头函数（=&gt;），你就可以自动得到词法<code>this</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    // ...</span><br><span class="line">    getSalaryFromServer(this.id, (salary) =&gt;&#123;</span><br><span class="line">        console.log(self.firstName) // chill</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>babel 是如果将箭头函数转换成普通的 ES5 函数语法的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  printNameAndSalary: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line"></span><br><span class="line">    getSalaryFromServer(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 可以看到，babel 也是通过把this指向暂存在另一个变量</span></span><br><span class="line">      <span class="built_in">console</span>.log(_this.firstName);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-处理arguments变量"><a href="#3-处理arguments变量" class="headerlink" title="3.处理arguments变量"></a>3.处理<code>arguments</code>变量</h3><p>在 ES5 中，<code>arguments</code> 表现的像是一个数组（比如我们可以正常的循环它），但是它却不是一个数组，因此，所有函数的方法，比如 sort、slice 等等是不能够使用的。</p><p>在 ES6 里， 我们可以使用  rest 参数的  特性, 形如<code>...args</code>,rest 参数是一个数组， 因此我们能够使用  各种数组的的方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySort</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Classes"><a href="#4-Classes" class="headerlink" title="4. Classes"></a>4. Classes</h3><p>从概念上讲，JS 中并不存在像其他面向对象语言（如 JAVA）那样的类的概念，但是在很长时间里，JS开发者已经把函数（也叫做构造函数）通过 <code>new</code> 关键词产生的对象称之为类，</p><p>因为 JS 并不支持类（Class）,仅仅通过原型来模拟，导致现有的语法，无论是目前正常使用JS的开发者，还是想用是使用传统OO语法的新开发者，都令人感到十分困惑。在一些场景尤其令人摸不着头脑，诸如创造子类，调用父级方法等等。</p><p>ES6 带来全新的语法， 就像大多数常见的编程语言一样，创建类这件事变得分成简单。一下是ES5和ES6两张创建类的方法的对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Shape = <span class="function"><span class="keyword">function</span>(<span class="params">id, x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.location(x, y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Shape.prototype.location = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Shape.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Shape + <span class="string">"("</span> + <span class="keyword">this</span>.id + <span class="string">")"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Shape.prototype.getLocation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x: <span class="keyword">this</span>.x,</span><br><span class="line"></span><br><span class="line">    y: <span class="keyword">this</span>.y</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Circle = <span class="function"><span class="keyword">function</span>(<span class="params">id, x, y, radius</span>) </span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>, id, x, y);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方式</span></span><br><span class="line"></span><br><span class="line">Circle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">Circle.prototype = <span class="keyword">new</span> Shape();</span><br><span class="line"></span><br><span class="line">Circle.prototype.constructor = Circle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"></span><br><span class="line">Circle.defaultCircle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Circle(<span class="string">"default"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Circle.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Circle &gt;"</span> + Shape.ptototype.toString.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id, x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.location(x, y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`shape :id = <span class="subst">$&#123;<span class="keyword">this</span>.id&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getLocaton() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x: <span class="keyword">this</span>.x,</span><br><span class="line"></span><br><span class="line">      y: <span class="keyword">this</span>.y</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span>() </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id, x, y, radius) &#123;</span><br><span class="line">    <span class="keyword">super</span>(id, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDefaultCircle() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Circle(<span class="string">"defalut"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Circle &gt;"</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UPDATE</strong>: 确保你你已经阅读了： <a href="https://medium.com/@rajaraodv/is-class-in-es6-the-new-bad-part-6c4e6fe1ee65" target="_blank" rel="noopener">ES6的中的<code>Class</code>语法是新的糟粕吗?</a></p><h3 id="5-严格模式"><a href="#5-严格模式" class="headerlink" title="5. 严格模式"></a>5. 严格模式</h3><p>严格模式（“use strict”）帮组开发甄别一些常见的问题（或者说js中的缺陷），同时避免JavaScript的滥用。在ES5，严格模式是一个可选项，但是在ES6，它是许多ES6特性所依赖的，因此很多开发者和工具库，比如babel，自动在文件的顶部添加了<code>“use strict”</code>，默认开启js的严格模式来强迫我们写更好的JS代码。</p><p>以上🙏</p><p><a href="https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981" target="_blank" rel="noopener">原文连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript 6 的特性可以被分为以下几种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;纯语法糖，比如 &lt;code&gt;class&lt;/code&gt; 语法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;JavaScript 增强性 
      
    
    </summary>
    
    
      <category term="vanilla" scheme="http://yoursite.com/tags/vanilla/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
</feed>
